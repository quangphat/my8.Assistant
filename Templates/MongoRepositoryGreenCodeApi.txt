using Microsoft.Extensions.Options;
using MongoDB.Bson;
using MongoDB.Driver;
using my8GreenCodeApi.Infrastructures;
using my8GreenCodeApi.Interface;
using my8GreenCodeApi.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace my8GreenCodeApi.Repository
{
    public class {ModelName}Repository:MongoRepositoryBase<{ModelName}>,I{ModelName}Repository
    {
		IMongoCollection<{ModelName}> collection;
		FilterDefinition<{ModelName}> filter = FilterDefinition<{ModelName}>.Empty;
        public {ModelName}Repository(IOptions<MongoConnection> setting) : base(setting) 
        {
            collection = _db.GetCollection<{ModelName}>("{ModelName}");
        }
        public async Task<string> Create({ModelName} {modelname})
        {
            try
            {
                await collection.InsertOneAsync({modelname});
                return {modelname}.Id;
            }
            catch
            {
                return string.Empty;
            }
        }

        public async Task<{ModelName}> Get(string id)
        {
            filter = Builders<{ModelName}>.Filter.Eq(p => p.Id, id);
            return await collection.Find(filter).FirstOrDefaultAsync();
        }
        public async Task<bool> Update({ModelName} {modelname})
        {
            var filter = Builders<{ModelName}>.Filter.Eq(p => p.Id, {modelname}.Id);
            var update = Builders<{ModelName}>.Update
                            .Set(s => s.Id, {modelname}.Id);
            try
            {
                await collection.UpdateOneAsync(filter, update);
                return true;
            }
            catch
            {
                return false;
            }
        }
        public async Task<bool> Delete(string id)
        {
            try
            {
                filter = Builders<{ModelName}>.Filter.Eq(p => p.Id, id);
                await collection.DeleteOneAsync(filter);
                return true;
            }
            catch { return false; }
        }
        public async Task<List<{ModelName}>> Search(string searchStr)
        {
            return null;
        }
    }
}
